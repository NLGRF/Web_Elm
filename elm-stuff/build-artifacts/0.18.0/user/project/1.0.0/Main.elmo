var _user$project$Main$pageSubscriptions = function (page) {
	var _p0 = page;
	switch (_p0.ctor) {
		case 'Blank':
			return _elm_lang$core$Platform_Sub$none;
		case 'Errored':
			return _elm_lang$core$Platform_Sub$none;
		case 'NotFound':
			return _elm_lang$core$Platform_Sub$none;
		case 'Settings':
			return _elm_lang$core$Platform_Sub$none;
		case 'Home':
			return _elm_lang$core$Platform_Sub$none;
		case 'Login':
			return _elm_lang$core$Platform_Sub$none;
		case 'Register':
			return _elm_lang$core$Platform_Sub$none;
		case 'Profile':
			return _elm_lang$core$Platform_Sub$none;
		case 'Article':
			return _elm_lang$core$Platform_Sub$none;
		default:
			return _elm_lang$core$Platform_Sub$none;
	}
};
var _user$project$Main$getPage = function (pageState) {
	var _p1 = pageState;
	if (_p1.ctor === 'Loaded') {
		return _p1._0;
	} else {
		return _p1._0;
	}
};
var _user$project$Main$sessionChange = _user$project$Ports$onSessionChange(
	function (_p2) {
		return _elm_lang$core$Result$toMaybe(
			A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Data_User$decoder, _p2));
	});
var _user$project$Main$decodeUserFromJson = function (json) {
	return A2(
		_elm_lang$core$Maybe$andThen,
		function (_p3) {
			return _elm_lang$core$Result$toMaybe(
				A2(_elm_lang$core$Json_Decode$decodeString, _user$project$Data_User$decoder, _p3));
		},
		_elm_lang$core$Result$toMaybe(
			A2(_elm_lang$core$Json_Decode$decodeValue, _elm_lang$core$Json_Decode$string, json)));
};
var _user$project$Main$Model = F2(
	function (a, b) {
		return {session: a, pageState: b};
	});
var _user$project$Main$Editor = F2(
	function (a, b) {
		return {ctor: 'Editor', _0: a, _1: b};
	});
var _user$project$Main$Article = function (a) {
	return {ctor: 'Article', _0: a};
};
var _user$project$Main$Profile = F2(
	function (a, b) {
		return {ctor: 'Profile', _0: a, _1: b};
	});
var _user$project$Main$Register = function (a) {
	return {ctor: 'Register', _0: a};
};
var _user$project$Main$Login = function (a) {
	return {ctor: 'Login', _0: a};
};
var _user$project$Main$Settings = function (a) {
	return {ctor: 'Settings', _0: a};
};
var _user$project$Main$Home = function (a) {
	return {ctor: 'Home', _0: a};
};
var _user$project$Main$Errored = function (a) {
	return {ctor: 'Errored', _0: a};
};
var _user$project$Main$NotFound = {ctor: 'NotFound'};
var _user$project$Main$Blank = {ctor: 'Blank'};
var _user$project$Main$initialPage = _user$project$Main$Blank;
var _user$project$Main$TransitioningFrom = function (a) {
	return {ctor: 'TransitioningFrom', _0: a};
};
var _user$project$Main$Loaded = function (a) {
	return {ctor: 'Loaded', _0: a};
};
var _user$project$Main$pageErrored = F3(
	function (model, activePage, errorMessage) {
		var error = A2(_user$project$Page_Errored$pageLoadError, activePage, errorMessage);
		return A2(
			_user$project$Util_ops['=>'],
			_elm_lang$core$Native_Utils.update(
				model,
				{
					pageState: _user$project$Main$Loaded(
						_user$project$Main$Errored(error))
				}),
			_elm_lang$core$Platform_Cmd$none);
	});
var _user$project$Main$EditorMsg = function (a) {
	return {ctor: 'EditorMsg', _0: a};
};
var _user$project$Main$ArticleMsg = function (a) {
	return {ctor: 'ArticleMsg', _0: a};
};
var _user$project$Main$ProfileMsg = function (a) {
	return {ctor: 'ProfileMsg', _0: a};
};
var _user$project$Main$RegisterMsg = function (a) {
	return {ctor: 'RegisterMsg', _0: a};
};
var _user$project$Main$LoginMsg = function (a) {
	return {ctor: 'LoginMsg', _0: a};
};
var _user$project$Main$SetUser = function (a) {
	return {ctor: 'SetUser', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$Main$pageSubscriptions(
				_user$project$Main$getPage(model.pageState)),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Platform_Sub$map, _user$project$Main$SetUser, _user$project$Main$sessionChange),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$SettingsMsg = function (a) {
	return {ctor: 'SettingsMsg', _0: a};
};
var _user$project$Main$HomeMsg = function (a) {
	return {ctor: 'HomeMsg', _0: a};
};
var _user$project$Main$viewPage = F3(
	function (session, isLoading, page) {
		var frame = A2(_user$project$Views_Page$frame, isLoading, session.user);
		var _p4 = page;
		switch (_p4.ctor) {
			case 'NotFound':
				return A2(
					frame,
					_user$project$Views_Page$Other,
					_user$project$Page_NotFound$view(session));
			case 'Blank':
				return A2(
					frame,
					_user$project$Views_Page$Other,
					_elm_lang$html$Html$text(''));
			case 'Errored':
				return A2(
					frame,
					_user$project$Views_Page$Other,
					A2(_user$project$Page_Errored$view, session, _p4._0));
			case 'Settings':
				return A2(
					_elm_lang$html$Html$map,
					_user$project$Main$SettingsMsg,
					A2(
						frame,
						_user$project$Views_Page$Other,
						A2(_user$project$Page_Settings$view, session, _p4._0)));
			case 'Home':
				return A2(
					_elm_lang$html$Html$map,
					_user$project$Main$HomeMsg,
					A2(
						frame,
						_user$project$Views_Page$Home,
						A2(_user$project$Page_Home$view, session, _p4._0)));
			case 'Login':
				return A2(
					_elm_lang$html$Html$map,
					_user$project$Main$LoginMsg,
					A2(
						frame,
						_user$project$Views_Page$Other,
						A2(_user$project$Page_Login$view, session, _p4._0)));
			case 'Register':
				return A2(
					_elm_lang$html$Html$map,
					_user$project$Main$RegisterMsg,
					A2(
						frame,
						_user$project$Views_Page$Other,
						A2(_user$project$Page_Register$view, session, _p4._0)));
			case 'Profile':
				return A2(
					_elm_lang$html$Html$map,
					_user$project$Main$ProfileMsg,
					A2(
						frame,
						_user$project$Views_Page$Profile(_p4._0),
						A2(_user$project$Page_Profile$view, session, _p4._1)));
			case 'Article':
				return A2(
					_elm_lang$html$Html$map,
					_user$project$Main$ArticleMsg,
					A2(
						frame,
						_user$project$Views_Page$Other,
						A2(_user$project$Page_Article$view, session, _p4._0)));
			default:
				var framePage = _elm_lang$core$Native_Utils.eq(_p4._0, _elm_lang$core$Maybe$Nothing) ? _user$project$Views_Page$NewArticle : _user$project$Views_Page$Other;
				return A2(
					_elm_lang$html$Html$map,
					_user$project$Main$EditorMsg,
					A2(
						frame,
						framePage,
						_user$project$Page_Article_Editor$view(_p4._1)));
		}
	});
var _user$project$Main$view = function (model) {
	var _p5 = model.pageState;
	if (_p5.ctor === 'Loaded') {
		return A3(_user$project$Main$viewPage, model.session, false, _p5._0);
	} else {
		return A3(_user$project$Main$viewPage, model.session, true, _p5._0);
	}
};
var _user$project$Main$EditArticleLoaded = F2(
	function (a, b) {
		return {ctor: 'EditArticleLoaded', _0: a, _1: b};
	});
var _user$project$Main$ProfileLoaded = F2(
	function (a, b) {
		return {ctor: 'ProfileLoaded', _0: a, _1: b};
	});
var _user$project$Main$ArticleLoaded = function (a) {
	return {ctor: 'ArticleLoaded', _0: a};
};
var _user$project$Main$HomeLoaded = function (a) {
	return {ctor: 'HomeLoaded', _0: a};
};
var _user$project$Main$setRoute = F2(
	function (maybeRoute, model) {
		var errored = _user$project$Main$pageErrored(model);
		var transition = F2(
			function (toMsg, task) {
				return A2(
					_user$project$Util_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							pageState: _user$project$Main$TransitioningFrom(
								_user$project$Main$getPage(model.pageState))
						}),
					A2(_elm_lang$core$Task$attempt, toMsg, task));
			});
		var _p6 = maybeRoute;
		if (_p6.ctor === 'Nothing') {
			return A2(
				_user$project$Util_ops['=>'],
				_elm_lang$core$Native_Utils.update(
					model,
					{
						pageState: _user$project$Main$Loaded(_user$project$Main$NotFound)
					}),
				_elm_lang$core$Platform_Cmd$none);
		} else {
			switch (_p6._0.ctor) {
				case 'NewArticle':
					var _p7 = model.session.user;
					if (_p7.ctor === 'Just') {
						return A2(
							_user$project$Util_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									pageState: _user$project$Main$Loaded(
										A2(_user$project$Main$Editor, _elm_lang$core$Maybe$Nothing, _user$project$Page_Article_Editor$initNew))
								}),
							_elm_lang$core$Platform_Cmd$none);
					} else {
						return A2(errored, _user$project$Views_Page$NewArticle, 'You must be signed in to post an article.');
					}
				case 'EditArticle':
					var _p9 = _p6._0._0;
					var _p8 = model.session.user;
					if (_p8.ctor === 'Just') {
						return A2(
							transition,
							_user$project$Main$EditArticleLoaded(_p9),
							A2(_user$project$Page_Article_Editor$initEdit, model.session, _p9));
					} else {
						return A2(errored, _user$project$Views_Page$Other, 'You must be signed in to edit an article.');
					}
				case 'Settings':
					var _p10 = model.session.user;
					if (_p10.ctor === 'Just') {
						return A2(
							_user$project$Util_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									pageState: _user$project$Main$Loaded(
										_user$project$Main$Settings(
											_user$project$Page_Settings$init(_p10._0)))
								}),
							_elm_lang$core$Platform_Cmd$none);
					} else {
						return A2(errored, _user$project$Views_Page$Settings, 'You must be signed in to access your settings.');
					}
				case 'Home':
					return A2(
						transition,
						_user$project$Main$HomeLoaded,
						_user$project$Page_Home$init(model.session));
				case 'Login':
					return A2(
						_user$project$Util_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								pageState: _user$project$Main$Loaded(
									_user$project$Main$Login(_user$project$Page_Login$initialModel))
							}),
						_elm_lang$core$Platform_Cmd$none);
				case 'Logout':
					var session = model.session;
					return A2(
						_user$project$Util_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								session: _elm_lang$core$Native_Utils.update(
									session,
									{user: _elm_lang$core$Maybe$Nothing})
							}),
						_elm_lang$core$Platform_Cmd$batch(
							{
								ctor: '::',
								_0: _user$project$Ports$storeSession(_elm_lang$core$Maybe$Nothing),
								_1: {
									ctor: '::',
									_0: _user$project$Route$modifyUrl(_user$project$Route$Home),
									_1: {ctor: '[]'}
								}
							}));
				case 'Register':
					return A2(
						_user$project$Util_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								pageState: _user$project$Main$Loaded(
									_user$project$Main$Register(_user$project$Page_Register$initialModel))
							}),
						_elm_lang$core$Platform_Cmd$none);
				case 'Profile':
					var _p11 = _p6._0._0;
					return A2(
						transition,
						_user$project$Main$ProfileLoaded(_p11),
						A2(_user$project$Page_Profile$init, model.session, _p11));
				default:
					return A2(
						transition,
						_user$project$Main$ArticleLoaded,
						A2(_user$project$Page_Article$init, model.session, _p6._0._0));
			}
		}
	});
var _user$project$Main$init = F2(
	function (val, location) {
		return A2(
			_user$project$Main$setRoute,
			_user$project$Route$fromLocation(location),
			{
				pageState: _user$project$Main$Loaded(_user$project$Main$initialPage),
				session: {
					user: _user$project$Main$decodeUserFromJson(val)
				}
			});
	});
var _user$project$Main$updatePage = F3(
	function (page, msg, model) {
		var errored = _user$project$Main$pageErrored(model);
		var toPage = F5(
			function (toModel, toMsg, subUpdate, subMsg, subModel) {
				var _p12 = A2(subUpdate, subMsg, subModel);
				var newModel = _p12._0;
				var newCmd = _p12._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							pageState: _user$project$Main$Loaded(
								toModel(newModel))
						}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, toMsg, newCmd)
				};
			});
		var session = model.session;
		var _p13 = {ctor: '_Tuple2', _0: msg, _1: page};
		_v8_18:
		do {
			_v8_17:
			do {
				switch (_p13._0.ctor) {
					case 'SetRoute':
						return A2(_user$project$Main$setRoute, _p13._0._0, model);
					case 'HomeLoaded':
						if (_p13._0._0.ctor === 'Ok') {
							return A2(
								_user$project$Util_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										pageState: _user$project$Main$Loaded(
											_user$project$Main$Home(_p13._0._0._0))
									}),
								_elm_lang$core$Platform_Cmd$none);
						} else {
							return A2(
								_user$project$Util_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										pageState: _user$project$Main$Loaded(
											_user$project$Main$Errored(_p13._0._0._0))
									}),
								_elm_lang$core$Platform_Cmd$none);
						}
					case 'ProfileLoaded':
						if (_p13._0._1.ctor === 'Ok') {
							return A2(
								_user$project$Util_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										pageState: _user$project$Main$Loaded(
											A2(_user$project$Main$Profile, _p13._0._0, _p13._0._1._0))
									}),
								_elm_lang$core$Platform_Cmd$none);
						} else {
							return A2(
								_user$project$Util_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										pageState: _user$project$Main$Loaded(
											_user$project$Main$Errored(_p13._0._1._0))
									}),
								_elm_lang$core$Platform_Cmd$none);
						}
					case 'ArticleLoaded':
						if (_p13._0._0.ctor === 'Ok') {
							return A2(
								_user$project$Util_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										pageState: _user$project$Main$Loaded(
											_user$project$Main$Article(_p13._0._0._0))
									}),
								_elm_lang$core$Platform_Cmd$none);
						} else {
							return A2(
								_user$project$Util_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										pageState: _user$project$Main$Loaded(
											_user$project$Main$Errored(_p13._0._0._0))
									}),
								_elm_lang$core$Platform_Cmd$none);
						}
					case 'EditArticleLoaded':
						if (_p13._0._1.ctor === 'Ok') {
							return A2(
								_user$project$Util_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										pageState: _user$project$Main$Loaded(
											A2(
												_user$project$Main$Editor,
												_elm_lang$core$Maybe$Just(_p13._0._0),
												_p13._0._1._0))
									}),
								_elm_lang$core$Platform_Cmd$none);
						} else {
							return A2(
								_user$project$Util_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										pageState: _user$project$Main$Loaded(
											_user$project$Main$Errored(_p13._0._1._0))
									}),
								_elm_lang$core$Platform_Cmd$none);
						}
					case 'SetUser':
						var _p14 = _p13._0._0;
						var session = model.session;
						var cmd = ((!_elm_lang$core$Native_Utils.eq(session.user, _elm_lang$core$Maybe$Nothing)) && _elm_lang$core$Native_Utils.eq(_p14, _elm_lang$core$Maybe$Nothing)) ? _user$project$Route$modifyUrl(_user$project$Route$Home) : _elm_lang$core$Platform_Cmd$none;
						return A2(
							_user$project$Util_ops['=>'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									session: _elm_lang$core$Native_Utils.update(
										session,
										{user: _p14})
								}),
							cmd);
					case 'SettingsMsg':
						switch (_p13._1.ctor) {
							case 'Settings':
								var _p15 = A3(_user$project$Page_Settings$update, model.session, _p13._0._0, _p13._1._0);
								var pageModel = _p15._0._0;
								var cmd = _p15._0._1;
								var msgFromPage = _p15._1;
								var newModel = function () {
									var _p16 = msgFromPage;
									if (_p16.ctor === 'NoOp') {
										return model;
									} else {
										var session = model.session;
										return _elm_lang$core$Native_Utils.update(
											model,
											{
												session: {
													user: _elm_lang$core$Maybe$Just(_p16._0)
												}
											});
									}
								}();
								return A2(
									_user$project$Util_ops['=>'],
									_elm_lang$core$Native_Utils.update(
										newModel,
										{
											pageState: _user$project$Main$Loaded(
												_user$project$Main$Settings(pageModel))
										}),
									A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$SettingsMsg, cmd));
							case 'NotFound':
								break _v8_17;
							default:
								break _v8_18;
						}
					case 'LoginMsg':
						switch (_p13._1.ctor) {
							case 'Login':
								var _p17 = A2(_user$project$Page_Login$update, _p13._0._0, _p13._1._0);
								var pageModel = _p17._0._0;
								var cmd = _p17._0._1;
								var msgFromPage = _p17._1;
								var newModel = function () {
									var _p18 = msgFromPage;
									if (_p18.ctor === 'NoOp') {
										return model;
									} else {
										var session = model.session;
										return _elm_lang$core$Native_Utils.update(
											model,
											{
												session: {
													user: _elm_lang$core$Maybe$Just(_p18._0)
												}
											});
									}
								}();
								return A2(
									_user$project$Util_ops['=>'],
									_elm_lang$core$Native_Utils.update(
										newModel,
										{
											pageState: _user$project$Main$Loaded(
												_user$project$Main$Login(pageModel))
										}),
									A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$LoginMsg, cmd));
							case 'NotFound':
								break _v8_17;
							default:
								break _v8_18;
						}
					case 'RegisterMsg':
						switch (_p13._1.ctor) {
							case 'Register':
								var _p19 = A2(_user$project$Page_Register$update, _p13._0._0, _p13._1._0);
								var pageModel = _p19._0._0;
								var cmd = _p19._0._1;
								var msgFromPage = _p19._1;
								var newModel = function () {
									var _p20 = msgFromPage;
									if (_p20.ctor === 'NoOp') {
										return model;
									} else {
										var session = model.session;
										return _elm_lang$core$Native_Utils.update(
											model,
											{
												session: {
													user: _elm_lang$core$Maybe$Just(_p20._0)
												}
											});
									}
								}();
								return A2(
									_user$project$Util_ops['=>'],
									_elm_lang$core$Native_Utils.update(
										newModel,
										{
											pageState: _user$project$Main$Loaded(
												_user$project$Main$Register(pageModel))
										}),
									A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$RegisterMsg, cmd));
							case 'NotFound':
								break _v8_17;
							default:
								break _v8_18;
						}
					case 'HomeMsg':
						switch (_p13._1.ctor) {
							case 'Home':
								return A5(
									toPage,
									_user$project$Main$Home,
									_user$project$Main$HomeMsg,
									_user$project$Page_Home$update(session),
									_p13._0._0,
									_p13._1._0);
							case 'NotFound':
								break _v8_17;
							default:
								break _v8_18;
						}
					case 'ProfileMsg':
						switch (_p13._1.ctor) {
							case 'Profile':
								return A5(
									toPage,
									_user$project$Main$Profile(_p13._1._0),
									_user$project$Main$ProfileMsg,
									_user$project$Page_Profile$update(model.session),
									_p13._0._0,
									_p13._1._1);
							case 'NotFound':
								break _v8_17;
							default:
								break _v8_18;
						}
					case 'ArticleMsg':
						switch (_p13._1.ctor) {
							case 'Article':
								return A5(
									toPage,
									_user$project$Main$Article,
									_user$project$Main$ArticleMsg,
									_user$project$Page_Article$update(model.session),
									_p13._0._0,
									_p13._1._0);
							case 'NotFound':
								break _v8_17;
							default:
								break _v8_18;
						}
					default:
						switch (_p13._1.ctor) {
							case 'Editor':
								var _p22 = _p13._1._0;
								var _p21 = model.session.user;
								if (_p21.ctor === 'Nothing') {
									return _elm_lang$core$Native_Utils.eq(_p22, _elm_lang$core$Maybe$Nothing) ? A2(errored, _user$project$Views_Page$NewArticle, 'You must be signed in to post articles.') : A2(errored, _user$project$Views_Page$Other, 'You must be signed in to edit articles.');
								} else {
									return A5(
										toPage,
										_user$project$Main$Editor(_p22),
										_user$project$Main$EditorMsg,
										_user$project$Page_Article_Editor$update(_p21._0),
										_p13._0._0,
										_p13._1._1);
								}
							case 'NotFound':
								break _v8_17;
							default:
								break _v8_18;
						}
				}
			} while(false);
			return A2(_user$project$Util_ops['=>'], model, _elm_lang$core$Platform_Cmd$none);
		} while(false);
		return A2(_user$project$Util_ops['=>'], model, _elm_lang$core$Platform_Cmd$none);
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		return A3(
			_user$project$Main$updatePage,
			_user$project$Main$getPage(model.pageState),
			msg,
			model);
	});
var _user$project$Main$SetRoute = function (a) {
	return {ctor: 'SetRoute', _0: a};
};
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$programWithFlags,
	function (_p23) {
		return _user$project$Main$SetRoute(
			_user$project$Route$fromLocation(_p23));
	},
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})(_elm_lang$core$Json_Decode$value);
